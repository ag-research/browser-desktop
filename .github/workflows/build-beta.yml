# name: Build (Beta)

# on:
#   schedule:
#     - cron: "0 20 * * SUN" # every sunday at 10pm
#   workflow_dispatch:

# jobs:
#   build-data:
#     name: üß¨ Generate build data
#     runs-on: ubuntu-latest
#     outputs:
#       version: ${{ steps.data.outputs.dotversion }}
#       sha: ${{ steps.data.outputs.shortsha }}
#       build_date: ${{ steps.data.outputs.builddate }}
#       rust_version: "1.51.0" # update this every so often to match latest stable rust release
#     steps:
#       - uses: actions/checkout@v2

#       - name: Export release data
#         id: data
#         shell: bash
#         run: |
#           echo "::set-output name=dotversion::$(cat package.json | sed -n 's|.*"firefox-display": "\([^"]*\)".*|\1|p')"
#           echo "::set-output name=shortsha::$(git rev-parse --short HEAD)"
#           echo "::set-output name=builddate::$(date +"%Y-%m-%d")"
#           exit 1
#   linux-64:
#     name: üêß Linux (64-bit)
#     runs-on: ubuntu-20.04
#     needs: [build-data]
#     env:
#       CI_SKIP_INIT: true
#       SHELL: /bin/sh
#     steps:
#       - run: echo ${{ github.run_id }}

#       - uses: actions/checkout@v2

#       - name: Free up space
#         run: |
#           sudo rm -rf /usr/share/dotnet
#           sudo rm -rf /opt/ghc
#           sudo rm -rf "/usr/local/share/boost"
#           sudo rm -rf "$AGENT_TOOLSDIRECTORY"
#       - name: Verify mozconfig
#         run: |
#           cat configs/linux/mozconfig
#       - name: Set up Git User
#         run: |
#           git config --global user.email "72629236+dothq-robot@users.noreply.github.com"
#           git config --global user.name "dothq-robot"
#       - name: Install dependencies
#         run: |
#           npm i typescript
#           sudo apt-get update --fix-missing
#           sudo apt-get update
#           sudo apt-get install dos2unix yasm nasm build-essential libgtk2.0-dev libpython3-dev m4 uuid libasound2-dev libcurl4-openssl-dev libdbus-1-dev libdrm-dev libdbus-glib-1-dev libdbus-glib-1-dev libgtk-3-dev libpulse-dev libx11-xcb-dev libxt-dev xvfb
#           rustup install ${{ needs.build-data.outputs.rust_version }}
#           rustup default ${{ needs.build-data.outputs.rust_version }}
#           cargo install sccache
#       - name: Download workspace
#         run: |
#           ./melon download
#           cd src
#           git init
#           echo Init
#           git checkout --orphan base
#           echo Checkout
#           git add -f .
#           echo Add
#           git commit -am "Firefox"
#           echo Commit
#           git checkout -b dot
#           echo Checkout 2
#           cd ..
#           sudo rm -rf firefox-*.source.tar.xz
#       - name: Fix line-endings
#         run: ./melon fix-le

#       - name: Import patches
#         run: ./melon import --minimal && ./melon doctor patches

#       - name: Build
#         run: |
#           export MACH_USE_SYSTEM_PYTHON=1
#           MOZ_SOURCE_CHANGESET=${{ github.sha }} ./melon build
#       - name: Package
#         run: |
#           export MACH_USE_SYSTEM_PYTHON=1
#           cd src
#           ./mach package
#           cd ..
#       - name: Make artifact available
#         run: |
#           cp ./src/obj-*/dist/dot-*.tar.bz2 .
#           mv dot-*.tar.bz2 "dot-${{ needs.build-data.outputs.version }}.tar.bz2"
#       - name: Upload artifact
#         uses: actions/upload-artifact@v2
#         with:
#           name: dot-${{ needs.build-data.outputs.version }}.tar.bz2
#           path: ./dot-${{ needs.build-data.outputs.version }}.tar.bz2

#   flatpak-64:
#     name: üì¶ Flatpak (64-bit)
#     needs: [build-data, linux-64]
#     runs-on: ubuntu-latest
#     container:
#       image: bilelmoussaoui/flatpak-github-actions:gnome-3.38
#       options: --privileged

#     steps:
#       - name: Clone packaging scripts
#         run: git clone --recurse-submodules https://github.com/dothq/packages.git

#       - uses: actions/setup-node@v2
#         with:
#           node-version: '14'

#       - uses: actions/download-artifact@v2
#         with:
#           name: dot-${{ needs.build-data.outputs.version }}.tar.bz2

#       - name: Display structure of downloaded files
#         run: ls -R

#       - name: Download binaries
#         run: |
#           cd packages/flatpak
#           node download.js
#           cp ../../dot-${{ needs.build-data.outputs.version }}.tar.bz2 ./dot.tar.bz2
#           tar -xvf dot.tar.bz2
#       - uses: bilelmoussaoui/flatpak-github-actions@v2
#         with:
#           bundle: dot-${{ needs.build-data.outputs.version }}.flatpak
#           manifest-path: './packages/flatpak/co.dothq.browser.nightly.yml'

#       - name: Upload artifact
#         uses: actions/upload-artifact@v2
#         with:
#           name: dot-${{ needs.build-data.outputs.version }}.flatpak
#           path: ./dot-${{ needs.build-data.outputs.version }}.flatpak

#   appimage-64:
#     name: üì¶ AppImage (64-bit)
#     needs: [build-data, linux-64]
#     runs-on: ubuntu-latest
#     steps:
#       - name: Clone packaging scripts
#         run: git clone --recurse-submodules https://github.com/dothq/packages.git

#       - uses: actions/setup-node@v2
#         with:
#           node-version: '14'

#       - uses: actions/download-artifact@v2
#         with:
#           name: dot-${{ needs.build-data.outputs.version }}.tar.bz2

#       - name: Display structure of downloaded files
#         run: ls -R

#       - name: Build
#         run: |
#           cd packages/
#           cp ../dot-${{ needs.build-data.outputs.version }}.tar.bz2 ./appimage/dot.tar.bz2
#           ./appimage/build.sh
#           cp ./appimage/Dot_Browser-x86_64.AppImage ../Dot_Browser-x86-64.AppImage
#           cp ./appimage/Dot_Browser-x86_64.AppImage.zsync ../Dot_Browser-x86-64.AppImage.zsync
#           mv ../Dot_Browser-x86-64.AppImage ../dot-${{ needs.build-data.outputs.version }}.AppImage

#       - name: Upload artifact
#         uses: actions/upload-artifact@v2
#         with:
#           name: dot-${{ needs.build-data.outputs.version }}.AppImage
#           path: ./dot-${{ needs.build-data.outputs.version }}.AppImage

#   # linux-32:
#   #   name: üêß Linux (32-bit)
#   #   runs-on: ubuntu-20.04
#   #   needs: [build-data]
#   #   env:
#   #     CI_SKIP_INIT: true
#   #     SHELL: /bin/sh
#   #   steps:
#   #     - run: echo ${{ github.run_id }}

#   #     - uses: actions/checkout@v2

#   #     - name: Free up space
#   #       run: |
#   #         sudo rm -rf /usr/share/dotnet
#   #         sudo rm -rf /opt/ghc
#   #         sudo rm -rf "/usr/local/share/boost"
#   #         sudo rm -rf "$AGENT_TOOLSDIRECTORY"

#   #     - name: Verify mozconfig
#   #       run: |
#   #         cat configs/linux/mozconfig-i686

#   #     - name: Set up Git User
#   #       run: |
#   #         git config --global user.email "72629236+dothq-robot@users.noreply.github.com"
#   #         git config --global user.name "dothq-robot"

#   #     - name: Install dependencies
#   #       run: |
#   #         npm i typescript
#   #         sudo apt-get update --fix-missing
#   #         sudo apt-get update
#   #         sudo apt-get install dos2unix
#   #         sudo apt-get install gcc-multilib g++-multilib libdbus-glib-1-dev:i386 libgtk2.0-dev:i386 libgtk-3-dev:i386 libpango1.0-dev:i386 libxt-dev:i386 libx11-xcb-dev:i386 libpulse-dev:i386 libdrm-dev:i386
#   #         rustup target install i686-unknown-linux-gnu
#   #         rustup install ${{ needs.build-data.outputs.rust_version }}
#   #         rustup default ${{ needs.build-data.outputs.rust_version }}

#   #     - name: Download workspace
#   #       run: |
#   #         ./melon download
#   #         cd src
#   #         git init
#   #         echo Init
#   #         git checkout --orphan base
#   #         echo Checkout
#   #         git add -f .
#   #         echo Add
#   #         git commit -am "Firefox"
#   #         echo Commit
#   #         git checkout -b dot
#   #         echo Checkout 2
#   #         cd ..
#   #         sudo rm -rf firefox-*.source.tar.xz

#   #     - name: Fix line-endings
#   #       run: ./melon fix-le

#   #     - name: Import patches
#   #       run: ./melon import --minimal && ./melon doctor patches

#   #     - name: Build
#   #       run: |
#   #         cd src
#   #         ./mach bootstrap --application-choice browser --no-interactive
#   #         cd ..
#   #         MOZ_SOURCE_CHANGESET=${{ github.sha }} ./melon build --arch i686

#   #     - name: Package
#   #       run: |
#   #         cd src
#   #         ./mach package
#   #         cd ..

#   #     - name: Make artifact available
#   #       run: |
#   #         cp ./src/obj-*/dist/dot-*.tar.bz2 .
#   #         mv dot-*.tar.bz2 "dot-${{ needs.build-data.outputs.version }}-i686.tar.bz2"

#   #     - name: Upload artifact
#   #       uses: actions/upload-artifact@v2
#   #       with:
#   #         name: dot-${{ needs.build-data.outputs.version }}-i686.tar.bz2
#   #         path: ./dot-${{ needs.build-data.outputs.version }}-i686.tar.bz2

#   windows-64:
#     name: üèÅ Windows (64-bit)
#     runs-on: [self-hosted, Windows, X64]
#     needs: [build-data]
#     env:
#       CI_SKIP_INIT: true
#       SHELL: /bin/sh
#     steps:
#       - run: echo ${{ github.run_id }}
#         shell: bash --noprofile --norc -eo pipefail {0}

#       - uses: actions/checkout@v2

#       - name: Add path
#         shell: powershell
#         run: |
#           echo "C:\Program Files\Git\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
#           echo "C:\Users\Administrator\scoop\shims" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

#       - name: Disable autocrlf
#         shell: bash --noprofile --norc -eo pipefail {0}
#         run: |
#           git config core.autocrlf false

#       - name: Verify mozconfig
#         shell: bash --noprofile --norc -eo pipefail {0}
#         run: |
#           echo 'mk_add_options MOZ_MAKE_FLAGS="-j4"' >> configs/windows/mozconfig
#           cat configs/windows/mozconfig

#       - name: Set up Git
#         shell: bash --noprofile --norc -eo pipefail {0}
#         run: |
#           git config --global user.email "72629236+dothq-robot@users.noreply.github.com"
#           git config --global user.name "dothq-robot"

#       - name: Install Typescript
#         shell: bash --noprofile --norc -eo pipefail {0}
#         run: |
#           npm i typescript

#       - name: Download workspace
#         shell: bash -leo pipefail {0}
#         run: |
#           echo $PWD
#           ls
#           shopt -s expand_aliases
#           xz --version
#           ./melon download
#           ./windows-init.sh

#       - name: Import patches
#         shell: bash --noprofile --norc -eo pipefail {0}
#         run: |
#           ./melon fix-le
#           ./melon import --minimal
#           ./melon doctor patches

#       - name: Build
#         shell: cmd
#         run: |
#           type nul > C:\build-script-64.sh
#           echo export PATH="$PATH:/c/Users/Administrator/bin:/mingw64/bin:/usr/local/bin:/usr/bin:/bin:/mingw64/bin:/usr/bin:/c/Users/Administrator/bin:/c/Users/Administrator/AppData/Local/Programs/Python/Python39/Scripts:/c/Users/Administrator/AppData/Local/Programs/Python/Python39:/c/Windows/system32:/c/Windows:/c/Windows/System32/Wbem:/c/Windows/System32/WindowsPowerShell/v1.0:/c/Windows/System32/OpenSSH:/cmd:/bin:/c/Program Files/nodejs:/c/ProgramData/chocolatey/bin:/c/ProgramData/chocolatey/lib/Elixir/bin:/c/XZ-5.2.1:/c/bin:/c/Program Files/dotnet:/c/Users/Administrator/.cargo/bin:/c/Users/Administrator/scoop/shims:/c/Users/Administrator/AppData/Local/Microsoft/WindowsApps:/bin:/c/Users/Administrator/AppData/Roaming/npm:/c/Users/Administrator/.dotnet/tools:/usr/bin/vendor_perl:/usr/bin/core_perl" >> C:\build-script-64.sh
#           echo echo $PATH >> C:\build-script-64.sh
#           echo rustup install ${{ needs.build-data.outputs.rust_version }} >> C:\build-script-64.sh
#           echo rustup default ${{ needs.build-data.outputs.rust_version }} >> C:\build-script-64.sh
#           echo rustc --version >> C:\build-script-64.sh
#           echo cd /c/_work/browser-desktop/browser-desktop >> C:\build-script-64.sh
#           echo MOZ_SOURCE_CHANGESET=${{ github.sha }} ./melon build >> C:\build-script-64.sh
#           C:\mozilla-build\start-shell.bat "C:\build-script-64.sh"

#       - name: Package
#         shell: cmd
#         run: |
#           type nul > C:\pack-script-64.sh
#           echo export PATH="$PATH:/c/Users/Administrator/.cargo/bin:/mingw64/bin:/usr/local/bin:/usr/bin:/bin:/mingw64/bin:/usr/bin:/c/Users/Administrator/bin:/c/Users/Administrator/AppData/Local/Programs/Python/Python39/Scripts:/c/Users/Administrator/AppData/Local/Programs/Python/Python39:/c/Windows/system32:/c/Windows:/c/Windows/System32/Wbem:/c/Windows/System32/WindowsPowerShell/v1.0:/c/Windows/System32/OpenSSH:/cmd:/bin:/c/Program Files/nodejs:/c/ProgramData/chocolatey/bin:/c/ProgramData/chocolatey/lib/Elixir/bin:/c/XZ-5.2.1:/c/bin:/c/Program Files/dotnet:/c/Users/Administrator/.cargo/bin:/c/Users/Administrator/scoop/shims:/c/Users/Administrator/AppData/Local/Microsoft/WindowsApps:/bin:/c/Users/Administrator/AppData/Roaming/npm:/c/Users/Administrator/.dotnet/tools:/usr/bin/vendor_perl:/usr/bin/core_perl" >> C:\pack-script-64.sh
#           echo echo $PATH >> C:\pack-script-64.sh
#           echo rustup install ${{ needs.build-data.outputs.rust_version }} >> C:\pack-script-64.sh
#           echo rustup default ${{ needs.build-data.outputs.rust_version }} >> C:\pack-script-64.sh
#           echo rustc --version >> C:\pack-script-64.sh
#           echo cd /c/_work/browser-desktop/browser-desktop/src >> C:\pack-script-64.sh
#           echo MOZCONFIG=../configs/windows/mozconfig ./mach package >> C:\pack-script-64.sh
#           C:\mozilla-build\start-shell.bat "C:\pack-script-64.sh"

#       - name: Make artifact available
#         shell: bash --noprofile --norc -eo pipefail {0}
#         run: |
#           cd /c/_work/browser-desktop/browser-desktop/src/obj-*/dist/install/sea
#           cp dot-*.installer.exe /c/_work/browser-desktop/browser-desktop
#           cd /c/_work/browser-desktop/browser-desktop
#           mv dot-*.installer.exe "dot-${{ needs.build-data.outputs.version }}.exe"

#       - name: Upload artifact
#         uses: actions/upload-artifact@v2
#         with:
#           name: dot-${{ needs.build-data.outputs.version }}.exe
#           path: ./dot-${{ needs.build-data.outputs.version }}.exe

#   # windows-32:
#   #   name: üèÅ Windows (32-bit)
#   #   runs-on: [self-hosted, Windows, X64]
#   #   needs: [build-data]
#   #   env:
#   #     CI_SKIP_INIT: true
#   #     SHELL: /bin/sh
#   #   steps:
#   #     - run: echo ${{ github.run_id }}
#   #       shell: bash --noprofile --norc -eo pipefail {0}

#   #     - uses: actions/checkout@v2

#   #     - name: Add path
#   #       shell: powershell
#   #       run: |
#   #         echo "C:\Program Files\Git\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
#   #         echo "C:\Users\Administrator\scoop\shims" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

#   #     - name: Disable autocrlf
#   #       shell: bash --noprofile --norc -eo pipefail {0}
#   #       run: |
#   #         git config core.autocrlf false

#   #     - name: Verify mozconfig
#   #       shell: bash --noprofile --norc -eo pipefail {0}
#   #       run: |
#   #         echo 'mk_add_options MOZ_MAKE_FLAGS="-j4"' >> configs/windows/mozconfig-i686
#   #         cat configs/windows/mozconfig-i686

#   #     - name: Set up Git
#   #       shell: bash --noprofile --norc -eo pipefail {0}
#   #       run: |
#   #         git config --global user.email "72629236+dothq-robot@users.noreply.github.com"
#   #         git config --global user.name "dothq-robot"

#   #     - name: Install Typescript
#   #       shell: bash --noprofile --norc -eo pipefail {0}
#   #       run: |
#   #         npm i typescript

#   #     - name: Download workspace
#   #       shell: bash -leo pipefail {0}
#   #       run: |
#   #         echo $PWD
#   #         ls
#   #         shopt -s expand_aliases
#   #         xz --version
#   #         ./melon download
#   #         ./windows-init.sh

#   #     - name: Import patches
#   #       shell: bash --noprofile --norc -eo pipefail {0}
#   #       run: |
#   #         ./melon fix-le
#   #         ./melon import --minimal
#   #         ./melon doctor patches

#   #     - name: Update path
#   #       shell: bash --noprofile --norc -eo pipefail {0}
#   #       run: |
#   #         echo ::set-output name=NPATH::$(echo $PATH)
#   #       id: path

#   #     - name: Build
#   #       shell: cmd
#   #       run: |
#   #         type nul > C:\build-script-32.sh
#   #         echo PATH="$PATH:${{ steps.path.outputs.NPATH }}:/c/Users/Administrator/.cargo/bin" >> C:\build-script-32.sh
#   #         echo echo $PATH >> C:\build-script-32.sh
#   #         echo rustup install ${{ needs.build-data.outputs.rust_version }} >> C:\build-script-32.sh
#   #         echo rustup default ${{ needs.build-data.outputs.rust_version }} >> C:\build-script-32.sh
#   #         echo rustc --version >> C:\build-script-32.sh
#   #         echo cd /c/_work/browser-desktop/browser-desktop >> C:\build-script-32.sh
#   #         echo MOZ_SOURCE_CHANGESET=${{ github.sha }} ./melon build --arch i686 >> C:\build-script-32.sh
#   #         C:\mozilla-build\start-shell.bat "C:\build-script-32.sh"

#   #     - name: Package
#   #       shell: cmd
#   #       run: |
#   #         type nul > C:\pack-script-32.sh
#   #         echo PATH="$PATH:${{ steps.path.outputs.NPATH }}:/c/Users/Administrator/.cargo/bin" >> C:\pack-script-32.sh
#   #         echo echo $PATH >> C:\pack-script-32.sh
#   #         echo rustup install ${{ needs.build-data.outputs.rust_version }} >> C:\pack-script-32.sh
#   #         echo rustup default ${{ needs.build-data.outputs.rust_version }} >> C:\pack-script-32.sh
#   #         echo rustc --version >> C:\pack-script-32.sh
#   #         echo cd /c/_work/browser-desktop/browser-desktop/src >> C:\pack-script-32.sh
#   #         echo MOZCONFIG=../configs/windows/mozconfig-i686 ./mach package >> C:\pack-script-32.sh
#   #         C:\mozilla-build\start-shell.bat "C:\pack-script-32.sh"

#   #     - name: Make artifact available
#   #       shell: bash --noprofile --norc -eo pipefail {0}
#   #       run: |
#   #         cd /c/_work/browser-desktop/browser-desktop/src/obj-*/dist/install/sea
#   #         cp dot-*.installer.exe /c/_work/browser-desktop/browser-desktop
#   #         cd /c/_work/browser-desktop/browser-desktop
#   #         mv dot-*.installer.exe "dot-${{ needs.build-data.outputs.version }}-i386.exe"

#   #     - name: Upload artifact
#   #       uses: actions/upload-artifact@v2
#   #       with:
#   #         name: dot-${{ needs.build-data.outputs.version }}-i386.exe
#   #         path: ./dot-${{ needs.build-data.outputs.version }}-i386.exe

#   mac:
#     name: üçè macOS (64-bit)
#     runs-on: macos-latest
#     needs: [build-data]
#     env:
#       CI_SKIP_INIT: true
#       SHELL: /bin/sh
#     steps:
#       - run: echo ${{ github.run_id }}

#       - uses: actions/checkout@v2

#       - name: Verify mozconfig
#         run: |
#           cat configs/macos/mozconfig

#       - name: Set up Git User
#         run: |
#           git config --global user.email "72629236+dothq-robot@users.noreply.github.com"
#           git config --global user.name "dothq-robot"

#       - name: Install dependencies
#         run: |
#           npm i typescript
#           brew install dos2unix
#           brew instal gnu-tar terminal-notifier watchman nasm yasm
#           rustup install ${{ needs.build-data.outputs.rust_version }}
#           rustup default ${{ needs.build-data.outputs.rust_version }}
#           cargo install sccache
#       - name: Download workspace
#         run: |
#           ./melon download
#           cd src
#           git init
#           echo Init
#           git checkout --orphan base
#           echo Checkout
#           git add -f .
#           echo Add
#           git commit -am "Firefox"
#           echo Commit
#           git checkout -b dot
#           echo Checkout 2
#           cd ..
#           sudo rm -rf firefox-*.source.tar.xz

#       - name: Fix line-endings
#         run: ./melon fix-le

#       - name: Import patches
#         run: ./melon import --minimal && ./melon doctor patches

#       - name: Build
#         run: |
#           export MACH_USE_SYSTEM_PYTHON=1
#           MOZ_SOURCE_CHANGESET=${{ github.sha }} ./melon build

#       - name: Package
#         run: |
#           cd src
#           export MACH_USE_SYSTEM_PYTHON=1
#           ./mach package
#           cd ..

#       - name: Make artifact available
#         run: |
#           cp ./src/obj-*/dist/dot-*.dmg .
#           mv dot-*.dmg "dot-${{ needs.build-data.outputs.version }}.dmg"

#       - name: Upload artifact
#         uses: actions/upload-artifact@v2
#         with:
#           name: dot-${{ needs.build-data.outputs.version }}.dmg
#           path: ./dot-${{ needs.build-data.outputs.version }}.dmg

#   source:
#     name: üìÅ Source tarball
#     runs-on: ubuntu-20.04
#     needs: [build-data]
#     env:
#       CI_SKIP_INIT: true
#       SHELL: /bin/sh
#     steps:
#       - run: echo ${{ github.run_id }}

#       - uses: actions/checkout@v2

#       - name: Set up Git User
#         run: |
#           git config --global user.email "72629236+dothq-robot@users.noreply.github.com"
#           git config --global user.name "dothq-robot"

#       - name: Install dependencies
#         run: |
#           npm i typescript

#       - name: Download workspace
#         run: |
#           ./melon download
#           cd src
#           git init
#           echo Init
#           git checkout --orphan base
#           echo Checkout
#           git add -f .
#           echo Add
#           git commit -am "Firefox"
#           echo Commit
#           git checkout -b dot
#           echo Checkout 2
#           cd ..
#           sudo rm -rf firefox-*.source.tar.xz

#       - name: Fix line-endings
#         run: ./melon fix-le

#       - name: Import patches
#         run: ./melon import --minimal && ./melon doctor patches

#       - name: Compress
#         run: |
#           XZ_OPT=-9e tar -cJvf dot-${{ needs.build-data.outputs.version }}.source.tar.xz src

#       - name: Upload artifact
#         uses: actions/upload-artifact@v2
#         with:
#           name: dot-${{ needs.build-data.outputs.version }}.source.tar.xz
#           path: ./dot-${{ needs.build-data.outputs.version }}.source.tar.xz

#   release:
#     name: üöÄ Release
#     runs-on: ubuntu-latest
#     needs: [build-data, mac, windows-64, linux-64, source, appimage-64, flatpak-64]
#     steps:
#       - uses: actions/checkout@v2

#       - name: Download all artifacts
#         uses: actions/download-artifact@v2

#       - name: List artifacts
#         run: ls -R

#       - name: Release
#         uses: dothq/tag-and-release-and-upload@master
#         with:
#           github-token: ${{ secrets.ROBOT_TOKEN }}
#           version: "${{ needs.build-data.outputs.version }}-${{ needs.build-data.outputs.build_date }}"
#           name: "Nightly v${{ needs.build-data.outputs.version }} - ${{ needs.build-data.outputs.build_date }}"
#           assets: '["dot-${{ needs.build-data.outputs.version }}.dmg/dot-${{ needs.build-data.outputs.version }}.dmg", "dot-${{ needs.build-data.outputs.version }}.exe/dot-${{ needs.build-data.outputs.version }}.exe", "dot-${{ needs.build-data.outputs.version }}.source.tar.xz/dot-${{ needs.build-data.outputs.version }}.source.tar.xz", "dot-${{ needs.build-data.outputs.version }}.tar.bz2/dot-${{ needs.build-data.outputs.version }}.tar.bz2", "dot-${{ needs.build-data.outputs.version }}.AppImage/dot-${{ needs.build-data.outputs.version }}.AppImage", "dot-${{ needs.build-data.outputs.version }}.flatpak/dot-${{ needs.build-data.outputs.version }}.flatpak"]'
#           body_path: "/home/runner/work/browser-desktop/browser-desktop/.github/RELEASE_TEMPLATE.md"
#           overwrite: true

#       - name: Build webhook
#         uses: dothq/actions-status-discord@master
#         if: always()
#         with:
#           webhook: ${{ secrets.DISCORD_WEBHOOK }}
#           username: Build
#           avatar_url: "https://github.com/dothq.png"
