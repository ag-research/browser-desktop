import { readFileSync, writeFileSync } from "fs-extra";
import { cpus } from "os";
import { resolve } from "path";
import { hideBin } from "yargs/helpers";
import { Melon } from "..";
import { makeExecutable } from "../utils/executable";
import { info, lightError, success, warning } from "../utils/log";
import { engineDir, srcDir } from "../utils/path";
import { $$ } from "../utils/sh";
import { readableTime } from "../utils/time";
import { ImportCommand } from "./import";
const xargs = require("cross-argv");
import which from "which";
import { portInUse } from "../utils/port";
import { readFile } from "fs/promises";
import { start } from "repl";
import { sleep } from "../utils/sleep";

const rebuildFilters = [
	"mozconfig",
	"moz.build",
	"jar.mn",
	"confvars.sh",
	"branding/",
	"",
];

export class BuildCommand {
	public name = "build";
	public description = "Builds Dot Browser.";

	public aliases = ["b"];

	public async exec(cli: Melon) {
		let d = Date.now();

		info(`Importing patches...`);

		// Import patches
		await new ImportCommand().exec(cli);

		const bin = hideBin(xargs());
		const args = bin.splice(1);

		await makeExecutable();

		const runNPMScript = async (name: any) => {
			const { scripts } = JSON.parse(
				readFileSync(resolve(srcDir, "package.json"), "utf-8")
			) as Record<string, string>;

			const script = scripts[name];
			if (!script)
				return lightError(`No script found with name \`${name}\`.`);

			await $$({ cwd: resolve(engineDir, "dot") })`${script}`;
		};

		await runNPMScript("i");
		await runNPMScript("lint");
		await runNPMScript("build");

		const userConfig = readFileSync(
			resolve(process.cwd(), "mozconfig"),
			"utf-8"
		);

		const commonConfig = readFileSync(
			resolve(process.cwd(), "configs", "common", "mozconfig"),
			"utf-8"
		);

		const os =
			process.platform == "win32"
				? "windows"
				: process.platform == "darwin"
				? "macos"
				: process.platform;

		const osConfig = readFileSync(
			resolve(process.cwd(), "configs", os, "mozconfig"),
			"utf-8"
		);

		const config = [
			"# This file is autogenerated. Don't touch!\n",
			commonConfig,
			osConfig,
			`mk_add_options MOZ_PARALLEL_BUILD=${Math.max(
				2,
				cpus().length / 2
			)}`,
			`mk_add_options MOZ_NOSPAM=1`, // disable build notifications
			userConfig,
		];

		writeFileSync(resolve(engineDir, "mozconfig"), config.join("\n"));

		let tries = 0;

		const startSccache = async () => {
			return new Promise(async (resolve) => {
				const sccacheRunning = await portInUse(4226);

				if (!sccacheRunning) {
					await $$({
						cwd: engineDir,
						noErrorKill: true,
					})`sccache --start-server`;

					if (!(await portInUse(4226))) {
						lightError(
							`Failed to launch sccache server. ${
								tries >= 5 ? `Aborting` : `Retrying`
							}...`
						);

						if (tries >= 5) {
							process.exit(1);
						} else {
							resolve(await startSccache());
						}
					} else {
						resolve(true);
					}
				} else {
					resolve(true);
				}
			});
		};

		if (!!which.sync("sccache", { nothrow: true })) {
			await startSccache();
		} else {
			warning(`Could not find \`sccache\`. Builds may be slow!`);
		}

		const { code } = await $$({
			cwd: engineDir,
			env: {
				MACH_USE_SYSTEM_PYTHON: "1",
			},
		})`${["python", "mach", "build", ...args].join(" ").trim()}`;

		if (code == 0) {
			success(
				`Successfully built Dot Browser for Desktop in ${readableTime(
					d
				)}`
			);
		}
	}
}
